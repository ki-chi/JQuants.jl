var documenterSearchIndex = {"docs":
[{"location":"#JQuants.jl","page":"JQuants.jl","title":"JQuants.jl","text":"","category":"section"},{"location":"","page":"JQuants.jl","title":"JQuants.jl","text":"GitHub repo: https://github.com/ki-chi/JQuants.jl","category":"page"},{"location":"#Overview","page":"JQuants.jl","title":"Overview","text":"","category":"section"},{"location":"","page":"JQuants.jl","title":"JQuants.jl","text":"A Julia package for using the J-Quants API that provide Japanese listed issues' price and financial information.","category":"page"},{"location":"","page":"JQuants.jl","title":"JQuants.jl","text":"You have to register to use the J-Quants API.","category":"page"},{"location":"#Installation","page":"JQuants.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"JQuants.jl","title":"JQuants.jl","text":"In the Julia REPL:","category":"page"},{"location":"","page":"JQuants.jl","title":"JQuants.jl","text":"] JQuants","category":"page"},{"location":"","page":"JQuants.jl","title":"JQuants.jl","text":"or","category":"page"},{"location":"","page":"JQuants.jl","title":"JQuants.jl","text":"julia> using Pkg; Pkg.add(\"JQuants\")","category":"page"},{"location":"#Example","page":"JQuants.jl","title":"Example","text":"","category":"section"},{"location":"","page":"JQuants.jl","title":"JQuants.jl","text":"julia> using JQuants\n\njulia> authorize([YOUR REFRESH TOKEN])\ntrue\n\njulia> fetch(FinsStatements(code=\"86970\"));  # Fetch financial statements\n","category":"page"},{"location":"#API-Wrappers","page":"JQuants.jl","title":"API Wrappers","text":"","category":"section"},{"location":"","page":"JQuants.jl","title":"JQuants.jl","text":"Functions exported from JQuants:","category":"page"},{"location":"","page":"JQuants.jl","title":"JQuants.jl","text":"Modules = [JQuants]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"#Base.fetch-Tuple{JQuants.API}","page":"JQuants.jl","title":"Base.fetch","text":"fetch(api::API, kwargs...)\n\nFetch data from JQuants API.\n\nArguments\n\napi::API: API struct to fetch data from\njson::Bool: If true, return a vector of the raw JSON strings. The number of elements in the vector is equal to the number of pages of the API response. If false, return a DataFrame. Default is false.\n\nExamples\n\njulia> fetch(ListedInfo(code=\"72030\"));\n\njulia> fetch(ListedInfo(code=\"72030\"), json=true);\n\n\n\n\n\n","category":"method"},{"location":"#JQuants.authorize","page":"JQuants.jl","title":"JQuants.authorize","text":"authorize(refresh_token::AbstractString)\nauthorize(emailaddress::AbstractString, password::AbstractString)\n\nAuthorize by the refresh token refresh_token, or the combination of email address emailaddress and password password. Return true after the authorization.\n\nThe details of this API are here and here.\n\nThis package temporally holds your ID Token and Refresh Token as the package-internal variables. Once authorized, reauthorization is not required until that the process of Julia exits or the tokens expires. You can check your tokens using JQuants.check_refresh_token() and JQuants.check_id_token().\n\nExamples\n\njulia> reftoken = [YOUR REFRESH TOKEN];\n\njulia> authorize(reftoken)\ntrue\n\njulia> email, pass = [YOUR EMAIL ADDRESS], [YOUR PASSWORD]\n\njulia> authorize(email, pass)\ntrue\n\n\n\n\n\n","category":"function"}]
}
